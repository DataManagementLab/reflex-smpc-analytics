from util import if_else
import numpy as np
import mpc_math
import math

program.use_trunc_pr = True
sfix.set_precision(4, 32)
program.use_split(3)


count = MemValue(0)
intermediate_size = MemValue(sint(0))
noise_count = MemValue(sint(0))
secure_counter = MemValue(sint(0))
true_matches = MemValue(sint(0))


temp = MemValue(sint(0))
bigvalue = 100000


def filter(input_table, inputsize, filter_col, keyword):
    intermediate_result = Matrix(inputsize,4,sint)

    @for_range_opt(inputsize)
    def _(i):
        relevant_bit = input_table[i][filter_col] == keyword

        intermediate_result[i][0] = input_table[i][0]
        intermediate_result[i][1] = input_table[i][1]
        intermediate_result[i][2] = relevant_bit
        intermediate_size.iadd(relevant_bit)

    intermediate_size.write(sint(0))
    return intermediate_result

def reveal_copy(input_size, output_size, inputmatrix):
    resultm = Matrix(output_size,6,sint)
    @for_range_opt(input_size)
    def _(i):
        inputmatrix[i][0].reveal()

    @for_range_opt(output_size)
    def _(i):
        resultm = inputmatrix[i][0]


    return resultm


def resizer_operator(inputtable, inputsizex, inputsizey, truematches, N_amount, N_add, threshold):#inputtable_index0 is c1
    output = Matrix(inputsizey,inputsizex+1,sint)
    if N_add == 0:
        @for_range_opt(inputsizey)
        def _(i):
            coin  = flip_coin_new(threshold, inputtable[i][0])
            fuzzyv = (inputtable[i][0] == 1).if_else(sint(1),coin)
            output[i][inputsizex] = fuzzyv

    else:
        secure_counter.write(N_amount)
        @for_range_opt(inputsizey)
        def _(i):
            #outcon = sint(1)
            outcon = (secure_counter>0).if_else(sint(1),sint(0))
            output[i][inputsizex] = (inputtable[i][0]==1).if_else(sint(1),outcon)
            temp = (inputtable[i][0]==0).if_else(secure_counter-1,secure_counter)
            secure_counter.write(temp)
        #secure_counter.write(sint(0))

    output.secure_shuffle()
    outm = reveal_copy(inputsizey,truematches+N_amount,output)

    return outm

    

def reveal_copy(input_size, output_size, inputmatrix):
    resultm = Matrix(output_size,6,sint)
    @for_range_opt(input_size)
    def _(i):
        inputmatrix[i][0].reveal()

    @for_range_opt(output_size)
    def _(i):
        resultm = inputmatrix[i][0]


    return resultm

def sum_online(r1,r2,r3):
    return r1+r2+r3

def compute_threshold_three_servers(noise, true_matches,table_size, numberOfservers):
    return int(noise/(table_size-true_matches)*bigvalue*numberOfservers)

def flip_coin_new(threshold, c1i):
    result = (c1i<=threshold).if_else(sint(1),sint(0))
    return result

def generate_truncated_laplace(sensitivity,epsilon,delta):
    eoversen = epsilon/sensitivity
    p = (np.exp(eoversen) - 1) / (np.exp(eoversen) + 1)
    noise0 = sfix(-sensitivity * np.log((np.exp(eoversen) + 1) * delta) / epsilon + sensitivity)
    r1 = sfix.get_random(0.0001,1)
    r2 = sfix.get_random(0.0001,1)
    r3 = sfix.get_random(0.0001,1)
    u = (r1 + r2 + r3 ) / 3 
    senovere = sensitivity / epsilon
    ptsen = p * sensitivity
    v1 = noise0 + senovere * mpc_math.log_fx(((epsilon*u)/ptsen), math.e)
    v2 = noise0 - senovere * mpc_math.log_fx(((epsilon*(1-u))/ptsen), math.e)

    v = (u <= 0.5).if_else(v1,v2)
    print_ln("original noise is: %s", v.reveal())
    return v

def noisy_filter_reflex(input_table, inputsize, filter_col, keyword):
    intermediate_result = Matrix(inputsize,4,sint)

    @for_range_opt(inputsize)
    def _(i):
        relevant_bit = input_table[i][filter_col] == keyword

        intermediate_result[i][0] = input_table[i][0]
        intermediate_result[i][1] = input_table[i][1]
        intermediate_result[i][2] = relevant_bit
        intermediate_size.iadd(relevant_bit)
    
    intermediate_size.write(sint(0))
    return intermediate_result

def noisy_filter_reflex3conditioins(input_table, inputsize, filter_col, keyword1,keyword2,keyword3):
    intermediate_result = Matrix(inputsize,4,sint)

    @for_range_opt(inputsize)
    def _(i):
        relevant_bit0 = input_table[i][filter_col] == keyword1
        relevant_bit1 = input_table[i][filter_col] == keyword2
        relevant_bit2 = input_table[i][filter_col] == keyword3
        tempbit = relevant_bit0.bit_and(relevant_bit1)
        relevant_bit = tempbit.bit_and(relevant_bit2)

        intermediate_result[i][0] = input_table[i][0]
        intermediate_result[i][1] = input_table[i][1]
        intermediate_result[i][2] = relevant_bit
        intermediate_size.iadd(relevant_bit)
    
    intermediate_size.write(sint(0))
    return intermediate_result

def resizer_operator_parallel(inputtable, inputsizex, inputsizey, truematches, noise, threshold, rlist0,rlist1,rlist2):#inputtable_index0 is c1
    start_timer(777)
    output = Matrix(inputsizey,inputsizex+1,sint)
    @for_range_opt(inputsizey)
    def _(i):
        coin  = flip_coin_new(threshold, sum_online(rlist0[i],rlist1[i],rlist2[i]))
        fuzzyv = (inputtable[i][0] == 1).if_else(sint(1),coin)
        output[i][inputsizex] = fuzzyv

    stop_timer(777)
    start_timer(888)
    output.secure_shuffle()
    stop_timer(888)

    #print_ln("resizer output size is:%s",int(truematches+noise))
    start_timer(999)
    outm = reveal_copy(inputsizey,int(truematches+noise),output)
    stop_timer(999)

    return outm

def equi_join_reflex(t1, table_size1, t2, table_size2):
    intermediate_array = Matrix(table_size1*table_size2,6,sint)
    @for_range_opt(table_size1)
    def _(i):
        @for_range_opt(table_size2)
        def _(j):
            match = t1[i][0] == t2[j][0]    
            intermediate_size.iadd(match)
            intermediate_array[count][5] = match
            intermediate_array[count][1] = t1[i][0] 
            intermediate_array[count][2] = t2[j][0]
            intermediate_array[count][3] = t1[i][1] 
            intermediate_array[count][4] = t2[j][1]
            count.write(count+1)
            true_matches.write(match+true_matches)
    count.write(0)

    return intermediate_array

######################################
#n = 1000 #table_size

n = 1000
x = 4
percentage = 0.1
truematches = int(n*percentage)

print_ln("n is:%s",n)

sensitivity = 32
epsilon = 0.5
delta = 0.00005
number_of_rand = 1000000

m1 = Matrix(n,x,sint)
m2 = Matrix(n,x,sint)
#m3 = Matrix(n,2,sint)

rlist0 = sint.Array(number_of_rand)
rlist1 = sint.Array(number_of_rand)
rlist2 = sint.Array(number_of_rand)

@for_range_opt(n)
def _(i):
    m1[i][0] = sint.get_input_from(0) #key pid
    m1[i][1] = sint.get_input_from(0) #value

@for_range_opt(n)
def _(i):
    m2[i][0] = sint.get_input_from(1) #key pid
    m2[i][1] = sint.get_input_from(1) #value


@for_range_opt(number_of_rand)
def _(i):
    rlist0[i] = sint.get_input_from(0)
    rlist1[i] = sint.get_input_from(1)
    rlist2[i] = sint.get_input_from(2)

##################################################################################join + resizer + filter
# start_timer(103)
# intermediate_array = equi_join_reflex(m1,n,m2,n)
# stop_timer(103)

# start_timer(104)
# noise = int(n*0.1)
# threshold = compute_threshold_three_servers(noise, truematches,n,3)
# out3 = resizer_operator_parallel(intermediate_array,x,n*n,int(n*n*percentage),noise,threshold,rlist0,rlist1,rlist2)
# stop_timer(104)


# start_timer(105)
# keyword = sint(234245)
# filter(out3,int(n*n*percentage+noise),1,keyword)
# stop_timer(105)


# start_timer(105)
# keyword = sint(234245)
# filter(intermediate_array,int(n*n),1,keyword)
# stop_timer(105)
##################################################################################

#####################################################################################join + resizer + order by
#SELECT icd9, count(*) FROM tableA JOIN tableB ON tableA.key=tableB.key WHERE dosage='325mg' GROUP BY icd9 ORDER BY COUNT(*) DESC


# start_timer(100)
# noise = generate_truncated_laplace(sensitivity,epsilon,delta)
# stop_timer(100)


# start_timer(103)
# intermediate_array = equi_join_reflex(m1,n,m2,n)
# stop_timer(103)

# start_timer(104)
# noise =249975#int(n*n*0.1)
# # noise = 
# #noise = int(noise.reveal())
# threshold = compute_threshold_three_servers(noise, truematches,n,3)
# out3 = resizer_operator_parallel(intermediate_array,x,n*n,int(n*n*percentage),noise,threshold,rlist0,rlist1,rlist2)
# stop_timer(104)

# start_timer(105)
# out3.sort()
# stop_timer(105)


# start_timer(105)
# intermediate_array.sort()
# stop_timer(105)
##TLap(): sensitivity=32, T=0.1*n*n, n=1000, 

#####################################################################################

start_timer(104)
noise =int(n*percentage)

threshold = compute_threshold_three_servers(noise, truematches,n,3)
out3 = resizer_operator_parallel(m1,x,n,int(n*percentage),noise,threshold,rlist0,rlist1,rlist2)
stop_timer(104)