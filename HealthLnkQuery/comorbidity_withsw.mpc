from util import if_else
import random
import numpy as np
import mpc_math
import math
from oram import OptimalORAM

program.bit_length = 64

offset = MemValue(sint(0))

def group_by(t_input_sorted,tsize):
    agg = OptimalORAM(tsize)
    agg_m = OptimalORAM(tsize)
    #agg = Array(tsize,sint)
    agg[0] = t_input_sorted[0][0]
    agg_m[0] = sint(1)
    @for_range_opt(tsize-1)
    def _(i):
        eqb = t_input_sorted[i][0] == t_input_sorted[i+1][0]
        temp = (eqb == 0).if_else(sint(i+1),offset)
        #print_ln("temp is:%s",temp.reveal())
        offset.write(temp)
        agg[offset] = agg[offset] + t_input_sorted[i+1][1]
        agg_m[offset] = sint(1)
        #print_ln("t[%s] input is:%s",i+1,t_input_sorted[i+1][1].reveal())
        #print_ln("agg[%s] is:%s",offset.reveal(),agg[offset].reveal())


    return agg,agg_m


n = 1200
t1 = Array(n,sint)
diagnose = Matrix(n,2,sint)

@for_range_opt(n)
def _(i):
    diagnose[i][0] = sint.get_input_from(2)


@for_range_opt(n)
def _(i):
    diagnose[i][1] = sint.get_input_from(2)



start_timer(109)
diagnose.sort()
stop_timer(109)


start_timer(110)
r,r_m = group_by(diagnose,n)
stop_timer(110)


gba = Array(n,sint)

@for_range_opt(n)
def _(i):
    gba[i] = r[i]


start_timer(111)
gba.sort()
stop_timer(111)

gba2 = Array(int(n/10),sint)

start_timer(114)
@for_range_opt(int(n/10))
def _(i):
    gba2[i] = gba[i]
stop_timer(114)


start_timer(112)
gba2.sort()
stop_timer(112)

@for_range_opt(10)
def _(i):
    print_ln("group by[%s] is:%s",i,gba[i].reveal())