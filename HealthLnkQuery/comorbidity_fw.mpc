from util import if_else
import numpy as np
import mpc_math
import math


sfix.set_precision(4, 32)
program.use_trunc_pr = True
program.use_split(3)

noise_count = MemValue(sint(0))
true_matches = MemValue(sint(0))
bigvalue = 2**20




def flip_coin_new(threshold, c1i):
    result = (c1i<=threshold).if_else(sint(1),sint(0))
    return result

# def flip_coin_online(noise,true_matches,table_size, r1 , r2 , r3):
#     v = (r1 + r2 + r3 ) / 3 
#     result = (v<=noise+true_matches*noise/table_size).if_else(sint(1),sint(0))
    
#     return result

def generate_truncated_laplace(sensitivity,epsilon,delta):
    eoversen = epsilon/sensitivity
    p = (np.exp(eoversen) - 1) / (np.exp(eoversen) + 1)
    noise0 = sfix(-sensitivity * np.log((np.exp(eoversen) + 1) * delta) / epsilon + sensitivity)
    r1 = sfix.get_random(0.0001,1)
    r2 = sfix.get_random(0.0001,1)
    r3 = sfix.get_random(0.0001,1)

    u = (r1 + r2 + r3 ) / 3 
    #print_ln("noise0 is:%s",noise0)
    senovere = sensitivity / epsilon
    ptsen = p * sensitivity
    v1 = noise0 + senovere * mpc_math.log_fx(((epsilon*u)/ptsen), math.e)
    v2 = noise0 - senovere * mpc_math.log_fx(((epsilon*(1-u))/ptsen), math.e)

    v = (u <= 0.5).if_else(v1,v2)
    print_ln("original noise is: %s", v.reveal())
    return v

def compute_threshold(noise, true_matches,table_size):
    return noise/(table_size-true_matches)*bigvalue

def generate_r(r1,r2,r3):
    return (r1+r2+r3)/3

def group_by_withoutoram_newcoin(t_input_sorted,tsize,noise,r1,r2,r3):
    agg = Array(tsize,sint)
    agg_m = Matrix(tsize, 2, sint)
    agg[0] = t_input_sorted[0][1]
    agg_m[0][0] = sint(1)


    @for_range_opt(tsize-1)
    def _(i):
        eqb = t_input_sorted[i][0] == t_input_sorted[i+1][0]
        temp = agg[i] + t_input_sorted[i+1][1]

        #agg_m[i] = (eqb == 1).if_else(sint(0),sint(1))
        agg[i+1] = (eqb == 1).if_else(temp,t_input_sorted[i+1][1])

        # flagN = noise >= noise_count
        # fMatch = flagN.bit_and(coin_seq[count+1])
        randomr = generate_r(r1,r2,r3)
        
        agg_m[i+1][0] = (eqb == 1).if_else(randomr,sint(1))
        true_matches.iadd(agg_m[i+1][0])

    agg_m[tsize-1][0] = sint(1)
    #noise_count.iadd(sint(1))

    threshold = compute_threshold(noise, true_matches, tsize)

    @for_range_opt(tsize)
    def _(i):
        coin = flip_coin_new(threshold, agg_m[i][0])
        agg_m[i][1] = (agg_m[i][0] == 1).if_else(sint(1),coin)

    return agg, agg_m


def group_by_withoutoram(t_input_sorted,tsize,noise,r1,r2,r3):
    agg = Array(tsize,sint)
    agg_m = Matrix(tsize, 2, sint)
    agg[0] = t_input_sorted[0][1]
    agg_m[0][0] = sint(1)


    @for_range_opt(tsize-1)
    def _(i):
        eqb = t_input_sorted[i][0] == t_input_sorted[i+1][0]
        temp = agg[i] + t_input_sorted[i+1][1]

        #agg_m[i] = (eqb == 1).if_else(sint(0),sint(1))
        agg[i+1] = (eqb == 1).if_else(temp,t_input_sorted[i+1][1])

        # flagN = noise >= noise_count
        # fMatch = flagN.bit_and(coin_seq[count+1])
        
        agg_m[i+1][0] = (eqb == 1).if_else(sint(0),sint(1))
        true_matches.iadd(agg_m[i+1][0])

    agg_m[tsize-1][0] = sint(1)
    #noise_count.iadd(sint(1))

    @for_range_opt(tsize)
    def _(i):
        coin = flip_coin_online(noise,true_matches,tsize,r1,r2,r3)
        agg_m[i][1] = (agg_m[i][0] == 1).if_else(sint(1),coin)

    return agg, agg_m


def group_by_withoutoram_add_throwcoin(t_input_sorted,tsize,noise,r1,r2,r3):
    agg = Array(tsize,sint)
    agg_m = Matrix(tsize, 2, sint)
    agg[0] = t_input_sorted[0][1]
    agg_m[0][0] = sint(1)


    @for_range_opt(tsize-1)
    def _(i):
        eqb = t_input_sorted[i][0] == t_input_sorted[i+1][0]
        temp = agg[i] + t_input_sorted[i+1][1]
        agg[i+1] = (eqb == 1).if_else(temp,t_input_sorted[i+1][1])

        coin = flip_coin_online(noise,true_matches,tsize,r1,r2,r3)
        agg_m[i+1][0] = (eqb == 1).if_else(coin,sint(1))
        true_matches.iadd(agg_m[i+1][0])

    agg_m[tsize-1][0] = sint(1)

    return agg, agg_m

######################################
n = 1000 #table_size
L = 0.03
sensitivity = max(1,L*n)
epsilon = 0.5
delta = 0.00005
percentage = 0.01


t1 = Array(n,sint)
diagnose = Matrix(n,2,sint)

print_ln("n is:%s",n)

@for_range_opt(n)
def _(i):
    diagnose[i][0] = sint.get_input_from(2)


@for_range_opt(n)
def _(i):
    diagnose[i][1] = sint.get_input_from(2)
    #print_ln("diagnose is:[%s] [%s]",diagnose[i][0].reveal(),diagnose[i][1].reveal())



start_timer(109)
diagnose.sort()
stop_timer(109)


#@for_range_opt(20)
#def _(i):
#    print_ln("input matrix is:[%s] [%s]",diagnose[i][0].reveal(),diagnose[i][1].reveal())


start_timer(130)
noise = generate_truncated_laplace(sensitivity,epsilon,delta)
stop_timer(130)



start_timer(110)
r1 = sfix.get_random(0.1,n)
r2 = sfix.get_random(0.1,n)
r3 = sfix.get_random(0.1,n)
r,r_m = group_by_withoutoram_newcoin(diagnose,n,noise,r1,r2,r3)
#r,r_m = group_by_withoutoram(diagnose,n,noise,r1,r2,r3)
#r,r_m = group_by_withoutoram_add_throwcoin(diagnose,n,noise,r1,r2,r3)
stop_timer(110)

gba = Array(int(n*percentage),sint)

start_timer(112)
@for_range_opt(int(n*percentage))
def _(i):
    gba[i] = r[i]
stop_timer(112)

start_timer(130)
gba.secure_shuffle()
stop_timer(130)


start_timer(111)
gba.sort()
stop_timer(111)


# @for_range_opt(10)
# def _(i):
#     print_ln("group by[%s] is:%s, matched is:%s",diagnose[i][0].reveal(),r[i].reveal(),r_m[i].reveal())

