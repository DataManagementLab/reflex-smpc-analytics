from util import if_else


sfix.set_precision(4, 32)
program.use_trunc_pr = True
program.use_split(3)

count = MemValue(0)
intermediate_size = MemValue(sint(0))
noise_count = MemValue(sint(0))
distinct_count = MemValue(sint(0))


temp = MemValue(sint(0))


def equi_join(t1, table_size1, t2, table_size2):
    intermediate_array = Matrix(table_size1*table_size2,5,sint)

    @for_range_opt(table_size1)
    def _(i):
        @for_range_opt(table_size2)
        def _(j):
            match = t1[i][0]==t2[j][0]

            intermediate_size.iadd(match)
            intermediate_array[count][0] = match
            intermediate_array[count][1] = t1[i][0] 
            intermediate_array[count][2] = t2[j][0]
            intermediate_array[count][3] = t1[i][1] 
            intermediate_array[count][4] = t2[j][1]
            count.write(count+1)
    count.write(0)
    return intermediate_size, intermediate_array



# def distinct(t_input_sorted,tsize):
#     disMatrix = Matrix(tsize,2,sint)
#     resultarray = Array(tsize,sint)

#     @for_range_opt(tsize)
#     def _(i):
#         disMatrix[i][0] = t_input_sorted[i][1]*10+t_input_sorted[i][0]
#         disMatrix[i][1] = t_input_sorted[i][0]
        
#     disMatrix.sort()

#     @for_range_opt(tsize)
#     def _(i):
#         print_ln("disMatrix[%s] is: merged[%s],selbit[%s]",i,disMatrix[i][0].reveal(),disMatrix[i][1].reveal())

#     resultarray[0] = sint(1).bit_and(disMatrix[0][1])

#     @for_range_opt(tsize-1)
#     def _(i):
#         eqb = disMatrix[i][0] == disMatrix[i+1][0]
#         disbit = (eqb == 1).if_else(sint(0),sint(1))
#         resultarray[i+1] = disbit.bit_and(disMatrix[i+1][1])


#     return resultarray

def distinct(t_input_sorted,tsize):
    
    resultarray = Array(tsize,sint)

    resultarray[0] = t_input_sorted[0][2]

    @for_range_opt(tsize-1)
    def _(i):
        eqb = t_input_sorted[i][0] != t_input_sorted[i+1][0]
        temp = eqb.bit_and(t_input_sorted[i+1][2])
        resultarray[i+1] = (temp == 1).if_else(sint(1),sint(0))
    return resultarray


def filter(input_table, inputsize, filter_col, keyword):
    intermediate_result = Matrix(inputsize,3,sint)

    @for_range_opt(inputsize)
    def _(i):
        relevant_bit = input_table[i][filter_col] == keyword

        intermediate_result[i][0] = input_table[i][0]
        intermediate_result[i][1] = input_table[i][1]
        intermediate_result[i][2] = relevant_bit

    
    return intermediate_result

###############################################################################

n = 1000
percentage = 0.1
print_ln("n is:%s",n)

m1 = Matrix(n,2,sint)
m2 = Matrix(n,2,sint)


@for_range_opt(n)
def _(i):
    m1[i][0] = sint.get_input_from(0) #key pid
    m1[i][1] = sint.get_input_from(0) #value

@for_range_opt(n)
def _(i):
    m2[i][0] = sint.get_input_from(1) #key pid
    m2[i][1] = sint.get_input_from(1) #value



start_timer(200)
keyword = sint(33425)
filtered_table = filter(m1,n,1,keyword)
stop_timer(200)


start_timer(300)
m1.sort()
stop_timer(300)


start_timer(110)
intermediate_size, intermediate_array = equi_join(m1,int(n*percentage),m2,int(n*percentage))
stop_timer(110)


start_timer(109)
intermediate_array.sort()
stop_timer(109)

start_timer(130)
sortM = Matrix(int(n*percentage),5,sint)
@for_range_opt(int(n*percentage))
def _(i):
    #sortM[i][0] = intermediate_array[i][1]
    sortM[i][0] = intermediate_array[i][0] + intermediate_array[i][1]*10
    sortM[i][1] = intermediate_array[i][3]
    sortM[i][2] = intermediate_array[i][0]
    sortM[i][3] = intermediate_array[i][1]
stop_timer(130)


start_timer(101)
sortM.sort()
stop_timer(101)

    
start_timer(111)
r = distinct(sortM,int(n*percentage))
stop_timer(111)





