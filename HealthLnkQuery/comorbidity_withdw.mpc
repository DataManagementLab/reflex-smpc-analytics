from util import if_else
import random
import numpy as np
import mpc_math
import math
from oram import OptimalORAM

program.bit_length = 64

offset = MemValue(sint(0))
noise_count = MemValue(sint(0))
count = MemValue(0)

def generate_random_coin_with_probability(noise,ran_length):
    result = sint.Array(ran_length)
    @for_range_opt(ran_length)
    def _(i):
        v = sint(np.random.randint(65535)%ran_length)
        #print_ln("random v is:%s", v.reveal())
        result[i] = (v<=noise).if_else(sint(1),sint(0))

        #print_ln("random bit is:%s", result[i].reveal())

    return result

def generate_laplace(sensitivity,epsilon):
    beta = sensitivity / epsilon
    r1 = sfix(np.random.random())
    r2 = np.random.random()
    r3 = np.random.random()
    rr1 = 1 - sfix((r2+r3)*10%10/10)
    rr2 = sfix((r2+r3)*10%10/10)
    value = 0
    value1 = -beta * mpc_math.log_fx(rr1,math.e)
    value2 = beta * mpc_math.log_fx(rr2,math.e)

    value = (r1 <= 0.5).if_else(value1,value2)
    print_ln("original noise is: %s", value.reveal())

    return value



def group_by_withNoise(t_input_sorted,tsize,noise, coin_seq):
    agg = OptimalORAM(tsize)
    agg_m = OptimalORAM(tsize)
    agg[0] = t_input_sorted[0][0]
    agg_m[0] = sint(1)

    @for_range_opt(tsize-1)
    def _(i):
        eqb = t_input_sorted[i][0] == t_input_sorted[i+1][0]
        temp = (eqb == 0).if_else(sint(i+1),offset)
        #print_ln("temp is:%s",temp.reveal())
        offset.write(temp)
        agg[offset] = agg[offset] + t_input_sorted[i+1][1]
        agg_m[offset] = sint(1)
        #print_ln("t[%s] input is:%s",i+1,t_input_sorted[i+1][1].reveal())
        #print_ln("agg[%s] is:%s",offset.reveal(),agg[offset].reveal())

    
        flagN = noise >= noise_count
        fMatch = flagN.bit_and(coin_seq[count+1])
        agg_m[i+1] = (agg_m[i+1] == 0).if_else(fMatch,sint(1))
        count.write(count+1)

        value1 = noise_count+1
        value2 = noise_count

        temp = (flagN == 1).if_else(value1,value2)
        noise_count.write(temp)

    

    return agg, agg_m


n = 10
t1 = Array(n,sint)
diagnose = Matrix(n,2,sint)

@for_range_opt(n)
def _(i):
    diagnose[i][0] = sint.get_input_from(2)


@for_range_opt(n)
def _(i):
    diagnose[i][1] = sint.get_input_from(2)



start_timer(130)
noise = abs(generate_laplace(n,0.5))
stop_timer(130)


start_timer(131)
coin_seq = generate_random_coin_with_probability(noise,n)
stop_timer(131)

start_timer(109)
diagnose.sort()
stop_timer(109)

start_timer(110)
r,r_m = group_by_withNoise(diagnose,n,noise,coin_seq)
#r = group_by_withNoise(diagnose,n,noise,coin_seq)
stop_timer(110)


gba = Array(int(n/10),sint)

start_timer(112)
@for_range_opt(int(n/10))
def _(i):
    gba[i] = r[i]
stop_timer(112)


start_timer(111)
gba.sort()
stop_timer(111)
