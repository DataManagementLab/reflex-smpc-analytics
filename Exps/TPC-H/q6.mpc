##############
# SELECT sum(l_extendedprice * l_discount) as revenue
# FROM lineitem
# WHERE l_shipdate >= 'date1' AND
#    l_shipdate < 'date2'
#    AND l_discount <= 'discount' - 0.01
#    AND l_discount >= 'discount' + 0.01
#    AND l_quantity < 'quantity'
#
#    l_shipdata between date1 AND date2
#    l_dicount between discount-0.01 and discount+0.01
#    l_quantity < 24
#

###### Lineitem
# 1.L_ORDERKEY|2.L_PARTKEY|3.L_SUPPKEY|4.L_LINENUMBER|5.L_QUANTITY|6.L_EXTENDEDPRICE|7.L_DISCOUNT|8.L_TAX|9.L_RETURNFLAG|10.L_LINESTATUS|11.L_SHIPDATE|
# 12.L_COMMITDATE|13.L_RECEIPTDATE|14.L_SHIPINSTRUCT|15.L_SHIPMODE|16.L_COMMENT

from util import if_else
import numpy as np
import mpc_math
import math

program.use_trunc_pr = True
sfix.set_precision(4, 32)
program.use_split(3)


count = MemValue(0)
intermediate_size = MemValue(sint(0))
noise_count = MemValue(sint(0))
true_matches = MemValue(sint(0))
sum = MemValue(sint(0))

date1 = sint(20150201)
date2 = sint(20180301)



def generate_truncated_laplace(sensitivity,epsilon,delta):
    eoversen = epsilon/sensitivity
    p = (np.exp(eoversen) - 1) / (np.exp(eoversen) + 1)
    noise0 = sfix(-sensitivity * np.log((np.exp(eoversen) + 1) * delta) / epsilon + sensitivity)
    r1 = sfix.get_random(0.0001,1)
    r2 = sfix.get_random(0.0001,1)
    r3 = sfix.get_random(0.0001,1)

    u = (r1 + r2 + r3 ) / 3 
    #print_ln("noise0 is:%s",noise0)
    senovere = sensitivity / epsilon
    ptsen = p * sensitivity
    v1 = noise0 + senovere * mpc_math.log_fx(((epsilon*u)/ptsen), math.e)
    v2 = noise0 - senovere * mpc_math.log_fx(((epsilon*(1-u))/ptsen), math.e)

    v = (u <= 0.5).if_else(v1,v2)
    print_ln("original noise is: %s", v.reveal())
    return v

def equi_join(t1, table_size1, t2, table_size2):
    intermediate_array = Matrix(table_size1*table_size2,5,sint)
    
    @for_range_opt(table_size1)
    def _(i):
        @for_range_opt(table_size2)
        def _(j):
            match = t1[i][0]==t2[j][0]

            intermediate_size.iadd(match)
            intermediate_array[count][0] = match
            intermediate_array[count][1] = t1[i][0] 
            intermediate_array[count][2] = t2[j][0]
            intermediate_array[count][3] = t1[i][1] 
            intermediate_array[count][4] = t2[j][1]

            count.write(count+1)
    count.write(0)
    

    return intermediate_size, intermediate_array


def filter_between_date(t_input, tsizex, tsizey):
    reuslt_m = Matrix(tsizey,tsizex+3,sint) #16+3 11 shipdate

    @for_range_opt(tsizey)
    def _(i):
        matcht_bit1 = t_input[i][10] >= date1
        matcht_bit2 = t_input[i][10] <= date2
        match_bit = matcht_bit1.bit_and(matcht_bit2)

        reuslt_m[i][16] = match_bit

    return reuslt_m


def filter_between_discount(t_input, tsizex, tsizey):
    reuslt_m = Matrix(tsizey,tsizex+3,sint) #16+3 11 shipdate

    @for_range_opt(tsizey)
    def _(i):
        matcht_bit1 = t_input[i][6] >= sfloat(0.59)
        matcht_bit2 = t_input[i][6] <= sfloat(0.61)
        match_bit = matcht_bit1.bit_and(matcht_bit2)

        reuslt_m[i][17] = match_bit

    return reuslt_m


def filter_smaller_than(t_input, tsizex, tsizey):
    reuslt_m = Matrix(tsizey,tsizex+3,sint) #16+3 11 shipdate

    @for_range_opt(tsizey)
    def _(i):
        matcht_bit = t_input[i][4] < 24
        reuslt_m[i][17] = matcht_bit

    return reuslt_m


def compute_revenue(t_input, tsizex, tsizey):
    reuslt_m = Matrix(tsizey,tsizex+3,sint) #16+3 11 shipdate
    
    @for_range_opt(tsizey)
    def _(i):
        reuslt_m[i][18] = t_input[i][5]*t_input[i][6]
        sum.write(sum + reuslt_m[i][18]*reuslt_m[i][17])

    return sum



######################################
#n = 1000 #table_size


size_lineitem = 10000
x = 16



lineitem = Matrix(size_lineitem,16,sint)



@for_range_opt(size_lineitem)
def _(i):
    lineitem[i][10] = sint.get_input_from(0)
    lineitem[i][6] = sint.get_input_from(0) 
    lineitem[i][4] = sint.get_input_from(0) 

##########################################filter


filter_between_date(lineitem, x, size_lineitem)
filter_between_discount(lineitem,x,size_lineitem)
filter_smaller_than(lineitem,x,size_lineitem)
compute_revenue(lineitem,x, size_lineitem)